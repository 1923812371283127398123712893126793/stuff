return function(encryptedText)
    local function generateMap(seed)
        local charset = {}
        for i = 32, 126 do
            table.insert(charset, string.char(i))
        end
        table.insert(charset, "\n")

        math.randomseed(seed)
        for i = #charset, 2, -1 do
            local j = math.random(i)
            charset[i], charset[j] = charset[j], charset[i]
        end

        local decryptMap = {}
        for i, char in ipairs(charset) do
            local key = string.char(31 + i)
            decryptMap[key] = char
        end
        return decryptMap
    end

    local seed, data = encryptedText:match("^(%d+)|(.*)$")
    if not seed then return "Error: Invalid encryption format!" end

    local decryptMap = generateMap(tonumber(seed))
    local decrypted = {}

    for i = 1, #data do
        local char = data:sub(i, i)
        table.insert(decrypted, decryptMap[char] or char)
    end

    local func, err = loadstring(table.concat(decrypted))
    if func then
        return func()
    else
        return "Decryption Error: " .. err
    end
end
