return function(data)
    local seed, map_str, encrypted_str = data:match("^(%d+)::SecureSec::(.-)::SecureSec::(.+)$")
    
    if not seed or not map_str or not encrypted_str then
        error("Invalid encrypted data format")
    end

    seed = tonumber(seed)
    math.randomseed(seed) -- Set the seed based on timestamp

    -- Convert map string back into table
    local map = {}
    for num in map_str:gmatch("%d+") do
        table.insert(map, tonumber(num))
    end

    -- Convert encrypted string back into ASCII and decrypt using the map
    local decrypted = {}
    local index = 1
    for num in encrypted_str:gmatch("%d+") do
        table.insert(decrypted, string.char(tonumber(num) - map[index]))
        index = index + 1
    end

    local decrypted_script = table.concat(decrypted)
    return loadstring(decrypted_script) -- Execute the decrypted script
end
