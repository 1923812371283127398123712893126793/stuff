-- Key for decryption
local key = "secretkey123"

-- Secure decryption and execution function
return function(encryptedString)
    -- XOR-based decryption logic
    local function decrypt()
        local decrypted = {}
        for byte in encryptedString:gmatch("!(%d+)") do
            local encryptedByte = tonumber(byte)
            local keyByte = key:byte((#decrypted) % #key + 1)
            local originalByte = (encryptedByte - 50) ~ keyByte
            table.insert(decrypted, string.char(originalByte))
        end
        return table.concat(decrypted)
    end

    -- Isolate the environment using getfenv
    local env = setmetatable({}, { __index = getfenv() })

    -- Decrypt and execute the code immediately
    local code = decrypt()
    local func, err = loadstring(code)
    if func then
        setfenv(func, env) -- Isolate to avoid interference
        return func() -- Execute the decrypted code immediately
    else
        error("Decryption failed: " .. tostring(err))
    end
end
