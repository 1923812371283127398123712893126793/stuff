return function(input)
    local shift, key, encrypted = input:match("^(%d+)|(.-)|(.*)$")
    shift = tonumber(shift)
    if not shift or not key or not encrypted then
        error("Invalid format: Decryption key or shift missing")
    end

    -- Reconstruct decryption map
    local decryptMap = {}
    for i = 1, #key, 2 do
        local original = key:sub(i, i)
        local encryptedChar = key:sub(i + 1, i + 1)
        decryptMap[encryptedChar] = original
    end

    -- Decrypt the text
    local result = {}
    for i = 1, #encrypted do
        local char = encrypted:sub(i, i)
        local originalChar = decryptMap[char] or char -- Reverse map
        local shiftedByte = originalChar:byte() - shift

        -- Keep within printable ASCII range
        if shiftedByte < 32 then
            shiftedByte = ((shiftedByte - 32 + 95) % 95) + 32
        end

        table.insert(result, string.char(shiftedByte))
    end

    local decryptedString = table.concat(result)

    -- Ensure valid Lua syntax before execution
    local chunk, err = loadstring(decryptedString)
    if not chunk then
        error("Decryption failed: Invalid Lua syntax â†’ " .. err .. "\nDecrypted Code:\n" .. decryptedString)
    end

    return chunk()
end
