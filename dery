-- Secret encryption key (must match the encryption key)
local key = "secretkey123"

-- Decryption function (returns a callable function)
return function(encryptedString)
    local function decrypt()
        local decrypted = {}
        for byte in encryptedString:gmatch("!(%d+)") do
            local encryptedByte = tonumber(byte)
            local keyByte = key:byte((#decrypted) % #key + 1)
            local originalByte = (encryptedByte - 50) ~ keyByte -- XOR and reverse shift
            table.insert(decrypted, string.char(originalByte))
        end
        return table.concat(decrypted)
    end

    -- Isolated environment using setfenv (if needed)
    local env = setmetatable({}, { __index = getfenv() })

    -- Decrypt and run the code instantly
    local code = decrypt()
    local func, err = loadstring(code)
    if func then
        setfenv(func, env)
        return func() -- Execute the decrypted code
    else
        error("Decryption failed: " .. tostring(err))
    end
end
