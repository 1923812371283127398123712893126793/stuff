local function generateMap(seed)
    local charset = {}
    for i = 32, 126 do
        if i ~= 34 and i ~= 39 and i ~= 40 and i ~= 41 and i ~= 92 then
            table.insert(charset, string.char(i))
        end
    end

    local pseudoRandom = seed % 100000 + 1
    for i = #charset, 2, -1 do
        pseudoRandom = (pseudoRandom * 73 + 17) % #charset + 1
        charset[i], charset[pseudoRandom] = charset[pseudoRandom], charset[i]
    end

    local encryptMap, decryptMap = {}, {}
    for i, char in ipairs(charset) do
        local key = string.char(31 + i)
        encryptMap[char] = key
        decryptMap[key] = char
    end
    return decryptMap
end

local function decrypt(enc)
    local sep = "|"
    local parts = {}

    -- Split seed and encrypted string
    for part in enc:gmatch("[^"..sep.."]+") do
        table.insert(parts, part)
    end

    local seed = tonumber(parts[1])
    local data = parts[2]

    if not seed or not data then
        error("Invalid encrypted format")
    end

    local decryptMap = generateMap(seed)
    local decrypted = {}

    for i = 1, #data do
        local char = data:sub(i, i)
        table.insert(decrypted, decryptMap[char] or char)
    end

    return table.concat(decrypted)  -- Decrypted Lua code as a string
end
